#!/usr/bin/bash
set -euo pipefail
shopt -s expand_aliases

alias tool='podman run --rm \
        -v /dev:/dev -v `pwd`:/data \
        -w /data quay.io/jianzzha/toolset'

alias coreos-installer='podman run --privileged --pull always --rm \
        -v /dev:/dev -v /run/udev:/run/udev -v `pwd`:/data \
        -w /data quay.io/coreos/coreos-installer:release'

alias butane='podman run --rm --interactive       \
              --security-opt label=disable        \
              --volume `pwd`:/pwd --workdir /pwd \
              quay.io/coreos/butane:release'

function setup_baremetal_interface() {
    systemctl enable NetworkManager --now
    mtu=`cat /sys/class/net/${BM_IF}/mtu`
    nmcli con down baremetal 2>/dev/null || true
    nmcli con del baremetal 2>/dev/null || true
    nmcli con add type bridge ifname baremetal con-name baremetal ipv4.method manual ipv4.addr 192.168.222.1/24 ipv4.dns 192.168.222.1 ipv4.dns-priority 10 autoconnect yes bridge.stp no
    nmcli con modify baremetal 802-3-ethernet.mtu ${DOLLAR}((mtu-4))
    nmcli con reload baremetal
    nmcli con up baremetal
    if [[ -n "${BM_IF}" && "${BM_IF}" != "null" ]]; then
        if [[ -n "${BM_VLAN}" && "${BM_VLAN}" != "null" ]]; then
            nmcli con down $BM_IF.$BM_VLAN 2>/dev/null || true
            nmcli con del $BM_IF.$BM_VLAN 2>/dev/null || true
            nmcli con add type vlan autoconnect yes con-name $BM_IF.$BM_VLAN ifname $BM_IF.$BM_VLAN dev $BM_IF id $BM_VLAN master baremetal slave-type bridge
            nmcli con reload $BM_IF.$BM_VLAN
            nmcli con up $BM_IF.$BM_VLAN
        else
            nmcli con down $BM_IF || true
            nmcli con del $BM_IF || true
            nmcli con add type bridge-slave autoconnect yes con-name $BM_IF ifname $BM_IF master baremetal
            nmcli con reload $BM_IF
            nmcli con up $BM_IF
        fi
    else
        echo "baremetal_phy_int not specified!"
        exit 1
    fi
}

function cleanup_baremetal_interface() {
    if [[ -n "${BM_VLAN}" && "${BM_VLAN}" != "null" ]]; then
        nmcli con down $BM_IF.$BM_VLAN 2>/dev/null || true
        nmcli con del $BM_IF.$BM_VLAN 2>/dev/null || true
    elif [[ "${BM_IF}" != "${default_route_interface}" ]]; then
        nmcli con down $BM_IF || true
        nmcli con del $BM_IF || true
    fi
    nmcli con down baremetal 2>/dev/null || true
    nmcli con del baremetal 2>/dev/null || true
}

function setup_firewall() {
    if firewall-cmd --state 2>/dev/null; then
        firewall-cmd --permanent --add-service=dhcp --add-service=dns || true
        firewall-cmd --permanent --add-port=${http_port}/tcp || true
    fi
}

function set_iptable_service() {
    cleanup_iptable_service
    /bin/cp -f ocp-iptables.sh /usr/local/bin/ocp-iptables.sh
    chmod u+x /usr/local/bin/ocp-iptables.sh
    /bin/cp -f ocp-iptables.service /usr/local/lib/systemd/system/ocp-iptables.service
    iptables -t nat -A POSTROUTING -s 192.168.222.0/24 ! -d 192.168.222.0/24 -o ${default_route_interface} -j MASQUERADE
}

function cleanup_iptable_service() {
    /bin/rm -rf /usr/local/lib/systemd/system/ocp-iptables.service || true
    /bin/rm -rf /usr/local/bin/ocp-iptables.sh || true
    while iptables -C POSTROUTING -t nat -s 192.168.222.0/24 ! -d 192.168.222.0/24 \
                   -o ${default_route_interface} -j MASQUERADE 2>/dev/null; do
        iptables -D POSTROUTING -t nat -s 192.168.222.0/24 ! -d 192.168.222.0/24 -o ${default_route_interface} -j MASQUERADE
    done
}
        
function remove_dnsmasq() {
    if podman container exists ocp-dnsmasq; then
        podman rm -f ocp-dnsmasq
    fi
}

function setup_dnsmasq() {
    remove_dnsmasq
    podman run -dit --name ocp-dnsmasq -v `pwd`/dnsmasq:/etc/dnsmasq.d --cap-add=NET_ADMIN --cap-add=NET_ADMIN \
        --net=host quay.io/jianzzha/dnsmasq -d -q --conf-file=/etc/dnsmasq.d/dnsmasq.conf \
        --enable-tftp --tftp-root=/var/lib/tftpboot --log-queries --log-dhcp
}

function remove_httpd() {
    if podman container exists ocp-httpd; then
        podman rm -f ocp-httpd
    fi
}

function setup_httpd() {
    remove_httpd
    podman run -dit --name ocp-httpd -p ${http_port}:80 -v `pwd`/htdocs:/usr/local/apache2/htdocs/ docker.io/httpd:2.4
}

function install_openshift_installer() {
    mkdir -p tmp
    if [[ -f tmp/openshift-install-linux.tar.gz ]]; then
        expected_checksum=`curl -sS ${client_base_url}/${client_version}/sha256sum.txt | grep -e openshift-install-linux-${client_version}.tar.gz | cut -d ' ' -f 1`
        if echo "${DOLLAR}{expected_checksum} tmp/openshift-install-linux.tar.gz" | sha256sum --check --status; then
            return
        fi
    fi
    curl -L -o tmp/openshift-install-linux.tar.gz ${client_base_url}/${client_version}/openshift-install-linux.tar.gz
    /bin/rm -rf /usr/local/bin/openshift-install
    tar -C /usr/local/bin -xzf tmp/openshift-install-linux.tar.gz
}

function install_openshift_client() {
    mkdir -p tmp
    if [[ -f tmp/openshift-client-linux.tar.gz ]]; then
        expected_checksum=`curl -sS ${client_base_url}/${client_version}/sha256sum.txt | grep -e openshift-client-linux-${client_version}.tar.gz | cut -d ' ' -f 1`
        if echo "${DOLLAR}{expected_checksum} tmp/openshift-client-linux.tar.gz" | sha256sum --check --status; then
            return
        fi
    fi
    curl -L -o tmp/openshift-client-linux.tar.gz ${client_base_url}/${client_version}/openshift-client-linux.tar.gz
    /bin/rm -rf /usr/local/bin/{kubectl,oc}
    tar -C /usr/local/bin -xzf tmp/openshift-client-linux.tar.gz
}

function download_rhcos_iso_via_ocp() {
    if ! command -v jq >/dev/null 2>&1; then
        "jq not installed!"
        exit 1
    fi
    expected_checksum=`openshift-install coreos print-stream-json | jq -r '.architectures.x86_64.artifacts.metal.formats.iso.disk.sha256'`
    if [[ -f tmp/rhcos-live.x86_64.iso ]]; then
        if echo "${DOLLAR}{expected_checksum} tmp/rhcos-live.x86_64.iso" | sha256sum --check --status; then
            return
        fi
    fi
    url=`openshift-install coreos print-stream-json | jq -r '.architectures.x86_64.artifacts.metal.formats.iso.disk.location'`
    curl -L -o tmp/rhcos-live.x86_64.iso "${DOLLAR}{url}"
}

function download_rhcos_iso() {
    mkdir -p tmp
    if [[ "${rcos_iso_url}" == "null" ]]; then
        # download url is not provided, get it via openshift-installer
        download_rhcos_iso_via_ocp
        return
    fi
    if [[ -f tmp/rhcos-live.x86_64.iso ]]; then
        expected_checksum=`curl -sS ${rcos_iso_url}/sha256sum.txt | grep rhcos-live.x86_64.iso | cut -d ' ' -f 1`
        if echo "${DOLLAR}{expected_checksum} tmp/rhcos-live.x86_64.iso" | sha256sum --check --status; then
            return
        fi
    fi
    curl -L -o tmp/rhcos-live.x86_64.iso "${rcos_iso_url}/rhcos-live.x86_64.iso"
}

function generate_ssh_ign() {
    butane --pretty --strict ocp/ssh.bu > ocp/ssh.ign
}
 
function setup_http_contents() {
    # ${DOLLAR}1: bootstrap-in-place-for-live-iso.ign, ssh.ign
    download_rhcos_iso
    /bin/rm -rf htdocs/rhcos-live.x86_64.iso 2>/dev/null || true
    coreos-installer iso ignition embed -i ocp/${DOLLAR}1 tmp/rhcos-live.x86_64.iso -o htdocs/rhcos-live.x86_64.iso
    mkdir -p /mnt/iso
    umount /mnt/iso 2>/dev/null || true
    rm -rf htdocs/{rhcos-live.x86_64-initrd.img,rhcos-live.x86_64-rootfs.img,rhcos-live.x86_64-vmlinuz}
    rm -rf tmp/{rhcos-live.x86_64-initrd.img,rhcos-live.x86_64-rootfs.img,rhcos-live.x86_64-vmlinuz}
    pushd tmp
    coreos-installer iso extract pxe rhcos-live.x86_64.iso
    popd
    /bin/mv tmp/{rhcos-live.x86_64-initrd.img,rhcos-live.x86_64-rootfs.img,rhcos-live.x86_64-vmlinuz} htdocs/
    mount -o loop htdocs/rhcos-live.x86_64.iso /mnt/iso
    /bin/cp -f /mnt/iso/images/ignition.img htdocs/
    chmod 0644 htdocs/*
}

function prepare_live() {
    generate_ssh_ign
    setup_http_contents ssh.ign
}

function wipe_disk() {
    target=${DOLLAR}{1:-"all"}
    # test if ssh server ready
    while ! nc -zvw10 ${sno_ip} 22; do
        sleep 5
    done
    if [[ ${DOLLAR}{target} != "all" ]]; then
        ssh -i ssh/id_rsa -o StrictHostKeyChecking=no core@${sno_ip} sudo sgdisk -Z /dev/${DOLLAR}{target}
        return
    fi
    disks=`ssh -i ssh/id_rsa -o StrictHostKeyChecking=no core@${sno_ip} sudo lsblk -l | grep disk | cut -d' ' -f 1`
    for disk in ${DOLLAR}{disks}; do
        ssh -i ssh/id_rsa -o StrictHostKeyChecking=no core@${sno_ip} sudo sgdisk -Z /dev/${DOLLAR}{disk}
    done
}

function update_etc_hosts() {
    # first remove all duplicate host entries
    cleanup_etc_hosts
    cat hosts >> /etc/hosts
}

function cleanup_etc_hosts() {
    # first remove all duplicate host entries
    while read -r line; do
        name=`echo ${DOLLAR}line | awk '{print ${DOLLAR}2}'`
        sed -i "/${DOLLAR}name/d" /etc/hosts
    done < hosts
}

function start_pxe_boot() {
    tool ipmitool -I lanplus -H ${ipmi_addr} -U ${ipmi_user} -P ${ipmi_password} chassis bootdev pxe ${pxe_opt}
    tool ipmitool -I lanplus -H ${ipmi_addr} -U ${ipmi_user} -P ${ipmi_password} chassis power cycle || \
    tool ipmitool -I lanplus -H ${ipmi_addr} -U ${ipmi_user} -P ${ipmi_password} chassis power on

}

function cleanup_vm() {
    virsh destroy ${sno_name} 2>/dev/null || true
    virsh undefine ${sno_name} 2>/dev/null || true 
    virsh vol-delete ${sno_name}.qcow2 --pool default 2>/dev/null || true
}

function start_vm() {
    cleanup_vm 
    virt-install -n ${sno_name} --pxe --os-type=Linux --os-variant=rhel8.0 --ram=16384 --vcpus=4 --network bridge=baremetal,mac=${pxe_mac} --disk size=120,bus=scsi,sparse=yes --check disk_size=off --noautoconsole --cpu host-passthrough
    while true; do
        sleep 3
        if ! virsh domstate ${sno_name} | grep running; then
            virsh start ${sno_name}
            break
        fi
    done
}

# if containers are still up, to re-deploy sno, "pxe" command will do
if [[ ${1:-""} == "pxe" ]]; then
    start_pxe_boot
    exit 0
elif [[ ${1:-""} == "start-containers" ]]; then
# after host reboots, all containers are down, use "start-containers" to bring them backup
    setup_dnsmasq
    setup_httpd
    exit 0
elif [[ ${1:-""} == "clean" ]]; then
# command "clean" means remove containers and delete baremetal network
    cleanup_vm
    remove_httpd
    remove_dnsmasq
    cleanup_baremetal_interface
    cleanup_iptable_service
    exit 0
elif [[ ${1:-""} == "setup-iptables" ]]; then
# command "setup-iptables" will re-establish the iptable entry
    set_iptable_service
    exit 0
elif [[ ${1:-""} == "add-hosts" ]]; then
# command "add-hosts" will add entries to /etc/hosts
    update_etc_hosts
    exit 0
elif [[ ${1:-""} == "remove-hosts" ]]; then
# command "remove-hosts" will remove entries from /etc/hosts
    cleanup_etc_hosts
    exit 0
elif [[ ${1:-""} == "no-pxe" ]]; then
# command "no-pxe" will prepare everything except pxe boot
    no_pxe="true"
elif [[ ${1:-""} == "live" ]]; then
    live="true"
elif [[ ${1:-""} == "wipe-first" ]]; then
    wipe_first="true"
elif [[ ${1:-""} == "vm" ]]; then
    use_vm="true"
elif [[ ${1:-""} == "help" ]]; then
# command "help" is self explaining
    echo "Without a sub-command, $0 will install SNO from scratch"
    echo "Available sub-commands:"
    echo "    pxe: pxe boot the taget host" 
    echo "    clean: clean up the network and service containers"
    echo "    start-containers: re-start the service containers"
    echo "    setup-iptables: reset the iptable entry added by this script"
    echo "    add-hosts: add SNO dns entries to /etc/hosts"
    echo "    remove-hosts: delete SNO dns entries from /etc/hosts"
    echo "    no-pxe: prepare everything except pxe boot"
    echo "    live: prepare live boot for ssh, user prepare a server to boot"
    echo "    wipe-first [sda]: wipe a disk(or all disks) before OCP install"
    echo "    vm: use a virtual machine for the ocp install"
    exit 0
elif [[ ${1:-""} != "" ]]; then
    echo "invalid sub-command!"
    exit 1
fi

# without a sub-command means install from scratch
setup_baremetal_interface
setup_firewall
set_iptable_service
install_openshift_installer
install_openshift_client
update_etc_hosts
openshift-install --dir=ocp create single-node-ignition-config
setup_dnsmasq
setup_httpd
if [[ ${DOLLAR}{live:-"false"} == "true" ]]; then
    prepare_live
    exit 0
fi
if [[ ${DOLLAR}{wipe_first:-"false"} == "true" ]]; then
    prepare_live
    start_pxe_boot
    # sleep some time to make sure pxe has started
    sleep 10
    wipe_disk ${DOLLAR}{2:-""}
fi 
setup_http_contents bootstrap-in-place-for-live-iso.ign
if [[ ${DOLLAR}{no_pxe:-"false"} == "true" ]]; then
    exit 0
fi
if [[ ${DOLLAR}{use_vm:-"false"} == "true" ]]; then
    start_vm
else   
    start_pxe_boot
fi
openshift-install --dir=ocp wait-for install-complete

